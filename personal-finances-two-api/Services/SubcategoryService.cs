using System.Collections.Generic;
using System.Linq;

using personal_finances_two_api.Models;
using personal_finances_two_api.Repositories;
using personal_finances_two_api.Services.Exceptions;

namespace personal_finances_two_api.Services
{
    public class SubcategoryService
    {
        private SubcategoryRepository _repository = new SubcategoryRepository();
        private MovementRepository _movementRepository = new MovementRepository();

        public IEnumerable<Subcategory> GetAll ()
        {
            return _repository.GetAll();
        }

        public Subcategory Get (int id)
        {
            var obj = _repository.Get(id);

            if (obj != null)
                return obj;
            else
                throw new ObjectNotFoundException($"Not found a subcategory with ID {id}");
        }

        public IEnumerable<Movement> GetMovements (int subcategoryId)
        {
            return _movementRepository.GetBySubcategory(subcategoryId);
        }

        public void Insert (Subcategory subcategory)
        {
            var exists = _repository.GetAll(subcategory.Name, subcategory.CategoryId).Count() > 0;

            subcategory.Enabled = true;
            subcategory.CanEdit = true;

            if (!exists)
                _repository.Insert(subcategory);
            else
                throw new ObjectAlreadyExistsException($"Already exists a subcategory with the name {subcategory.Name}");
        }

        public void Update (Subcategory subcategory)
        {
            var currentSubcategory = Get(subcategory.Id);

            if (currentSubcategory.CanEdit)
            {
                var exists = _repository.GetAll(subcategory.Name, subcategory.CategoryId)
                    .Count(s => !s.Id.Equals(subcategory.Id)) > 0;

                subcategory.Enabled = true;
                subcategory.CanEdit = true;

                if (!exists)
                    _repository.Update(subcategory);
                else
                    throw new ObjectAlreadyExistsException($"Already exists a subcategory with the name {subcategory.Name}");
            }
            else
            {
                throw new InvalidOperationException("This subcategory was generated by another routine and can not be edited");
            }
        }

        public void Delete (int id)
        {
            var currentSubcategory = Get(id);

            if (currentSubcategory.CanEdit)
            {
                currentSubcategory.Enabled = false;
                _repository.Update(currentSubcategory);
            }
            else
            {
                throw new InvalidOperationException("This subcategory was generated by another routine and can not be deleted");
            }
        }

        public void Delete (IEnumerable<Subcategory> subcategories)
        {
            subcategories = subcategories.Select(s => { s.Enabled = false; return s; }).ToList();
            _repository.Update(subcategories);
        }
    }
}