using System.Collections.Generic;
using System.Linq;

using personal_finances_two_api.Models;
using personal_finances_two_api.Repositories;
using personal_finances_two_api.Services.Exceptions;

namespace personal_finances_two_api.Services
{
    public class CategoryService
    {
        private CategoryRepository _repository = new CategoryRepository();
        private MovementRepository _movementRepository = new MovementRepository();
        private SubcategoryRepository _subcategoryRepository = new SubcategoryRepository();

        private SubcategoryService _subcategoryService = new SubcategoryService();

        public IEnumerable<Category> GetAll ()
        {
            return _repository.GetAll();
        }

        public Category Get(int id)
        {
            var obj = _repository.Get(id);

            if (obj != null)
                return obj;
            else
                throw new ObjectNotFoundException($"Not found a category with ID {id}");
        }

        public Category GetPaymentCategory ()
        {
            return _repository.GetAll("Payment", "D").FirstOrDefault();
        }

        public IEnumerable<Movement> GetMovements (int categoryId)
        {
            return _movementRepository.GetByCategory(categoryId);
        }

        public IEnumerable<Subcategory> GetSubcategories (int categoryId)
        {
            return _subcategoryRepository.GetByCategory(categoryId);
        } 

        public void Insert (Category category)
        {
            var exists = _repository.GetAll(category.Name, category.Type).Count() > 0;

            category.Enabled = true;
            category.CanEdit = true;

            if (!exists)
                _repository.Insert(category);
            else
                throw new ObjectAlreadyExistsException($"Already exists a category with the name {category.Name}");
        }

        public void Update (Category category)
        {
            var currentCategory = Get(category.Id);
            
            if (currentCategory.CanEdit)
            {
                var exists = _repository.GetAll(category.Name, category.Type).Count(c => !c.Id.Equals(category.Id)) > 0;

                category.Enabled = true;
                category.CanEdit = true;

                if (!exists)
                    _repository.Update(category);
                else
                    throw new ObjectAlreadyExistsException($"Already exists a category with the name {category.Name}");
            }
            else
            {
                throw new InvalidOperationException("This category was generated by another routine and can not be edited");
            }
        }

        public void Delete (int id)
        {
            var category = Get(id);

            if (category.CanEdit)
            {
                category.Enabled = false;

                _repository.Update(category);
                _subcategoryService.Delete(GetSubcategories(category.Id));
            }
            else
            {
                throw new InvalidOperationException("This category was generated by another routine and can not be deleted");
            }
        }
    }
}