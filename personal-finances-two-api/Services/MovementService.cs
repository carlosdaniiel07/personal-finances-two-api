using System;
using System.Linq;
using System.Collections.Generic;

using personal_finances_two_api.Services.Exceptions;
using personal_finances_two_api.Models;
using personal_finances_two_api.Models.Enums;
using personal_finances_two_api.Repositories;

namespace personal_finances_two_api.Services
{
    public class MovementService
    {
        private MovementRepository _repository = new MovementRepository();

        private CreditCardService _creditCardService = new CreditCardService();
        private InvoiceService _invoiceService = new InvoiceService();
        private AccountService _accountService = new AccountService();

        public IEnumerable<Movement> GetAll ()
        {
            return _repository.GetAll().OrderByDescending(m => m.AccountingDate).ToList();
        }

        public Movement Get(int id)
        {
            return _repository.Get(id);
        }

        public void Insert (Movement movement)
        {
            movement.Increase = movement.Increase ?? 0;
            movement.Decrease = movement.Decrease ?? 0;
            movement.InclusionDate = DateTime.Now;
            movement.CanEdit = true;

            if (IsCreditCardMovement(movement))
            {
                if (movement.Type.Equals("D"))
                    RelateToCreditCard(movement);
                else
                    throw new Exceptions.InvalidOperationException("Credit cards can be used only with expenses");
            }

            _repository.Insert(movement);

            if (IsLaunched(movement))
                _accountService.AdjustBalance(movement.AccountId);
        }

        public void Insert (Movement movement, bool canEdit)
        {
            movement.Increase = movement.Increase ?? 0;
            movement.Decrease = movement.Decrease ?? 0;
            movement.InclusionDate = DateTime.Now;
            movement.CanEdit = canEdit;

            if (IsCreditCardMovement(movement))
            {
                if (movement.Type.Equals("D"))
                    RelateToCreditCard(movement);
                else
                    throw new Exceptions.InvalidOperationException("Credit cards can be used only with expenses");
            }

            _repository.Insert(movement);

            if (IsLaunched(movement))
                _accountService.AdjustBalance(movement.AccountId);
        }

        public void Update (Movement movement)
        {
            var oldMovement = Get(movement.Id);

            if (oldMovement.CanEdit)
            {
                movement.Increase = movement.Increase ?? 0;
                movement.Decrease = movement.Decrease ?? 0;
                movement.InclusionDate = oldMovement.InclusionDate;
                movement.CanEdit = oldMovement.CanEdit;

                if (IsCreditCardMovement(movement))
                {
                    if (movement.Type.Equals("D"))
                        RelateToCreditCard(movement);
                    else
                        throw new Exceptions.InvalidOperationException("Credit cards can be used only with expenses");
                }

                _repository.Update(movement);

                if (!movement.MovementStatus.Equals(oldMovement.MovementStatus))
                    _accountService.AdjustBalance(movement.AccountId);

                if (!oldMovement.AccountId.Equals(movement.AccountId))
                    _accountService.AdjustBalance(oldMovement.AccountId);
            }
            else
            {
                throw new Exceptions.InvalidOperationException("This movement was generated by another routine and can not be changed");
            }
        }

        public void LaunchMovement (IEnumerable<Movement> movements, bool adjustAccountBalance)
        {
            foreach (var movement in movements)
                movement.MovementStatus = MovementStatus.Launched;

            _repository.Update(movements);

            if (adjustAccountBalance)
                foreach (var movement in movements)
                    _accountService.AdjustBalance(movement.AccountId);
        }

        public void Delete (int id)
        {
            var movement = Get(id);

            if (movement.CanEdit)
            {
                _repository.Remove(movement);

                if (IsLaunched(movement))
                    _accountService.AdjustBalance(movement.AccountId);
            }
            else
            {
                throw new Exceptions.InvalidOperationException("This movement was generated by another routine and can not be changed");
            }
        }

        public void Launch (int id)
        {
            var movement = Get(id);

            if (!IsLaunched(movement))
            {
                if (!IsCreditCardMovement(movement))
                {
                    movement.MovementStatus = MovementStatus.Launched;
                    Update(movement);
                }
                else
                {
                    throw new Exceptions.InvalidOperationException("A credit card expense will be launched when the invoice is paid");
                }
            }
        }

        private void RelateToCreditCard (Movement movement)
        {
            var creditCard = _creditCardService.Get(movement.InvoiceId.Value);

            if (CreditCardService.CanBeUsed(creditCard, movement))
            {
                try
                {
                    movement.InvoiceId = _invoiceService.Get(creditCard.Id, InvoiceService.GetInvoiceReferenceByAccountingDate(int.Parse(creditCard.InvoiceClosure), movement.AccountingDate)).Id;
                }
                catch (ObjectNotFoundException)
                {
                    var generatedInvoice = _invoiceService.GenerateInvoice(creditCard, movement.AccountingDate);

                    _invoiceService.Insert(generatedInvoice);

                    movement.InvoiceId = _invoiceService.Get(creditCard.Id, InvoiceService.GetInvoiceReferenceByAccountingDate(int.Parse(creditCard.InvoiceClosure), movement.AccountingDate)).Id;
                }

                movement.MovementStatus = MovementStatus.Pending;
            }
        }

        public static double TotalCredit (IEnumerable<Movement> movements)
        {
            return movements.Where(m => m.Type.Equals("C") && m.MovementStatus.Equals(MovementStatus.Launched))
                .Sum(m => m.TotalValue);
        }

        public static double TotalDebit (IEnumerable<Movement> movements)
        {
            return movements.Where(m => m.Type.Equals("D") && m.MovementStatus.Equals(MovementStatus.Launched))
                .Sum(m => m.TotalValue);
        }

        private bool IsLaunched (Movement movement)
        {
            return movement.MovementStatus.Equals(MovementStatus.Launched);
        }

        private bool IsCreditCardMovement (Movement movement)
        {
            return movement.InvoiceId.HasValue;
        }
    }
}